// Package errata is auto-generated by errata
// Version: d47cb943ec399628ee0cfbb9458a1bd5
package errata

import (
	"crypto/sha1"
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

type Error struct {
	Code       string
	Message    string
	Cause      string
	Categories []string
	Args       []interface{}
	Labels     map[string]string
	Guide      string

	file string
	line int

	uuid    string
	wrapped error
}

func (e Error) Unwrap() error {
	return e.wrapped
}

func (e Error) UUID() string {
	if e.uuid == "" {
		e.uuid = generateReference(e.Code)
	}
	return e.uuid
}

func (e Error) Error() string {
	message := fmt.Sprintf("[errata-%s] [%s:%v] %s. For more details, see %s.\n\tWrapped error: %s", e.Code, e.file, e.line, e.Message, e.HelpURL(), e.Unwrap())
	return fmt.Sprintf(message, e.Args...)
}

func (e Error) HelpURL() string {
	return fmt.Sprintf("https://dannykopping.github.io/errata/errata/%s", e.Code)
}

const (
	ErrCodeGen             = "code-gen"
	ErrFileNotFound        = "file-not-found"
	ErrFileNotReadable     = "file-not-readable"
	ErrInvalidDefinitions  = "invalid-definitions"
	ErrInvalidSyntax       = "invalid-syntax"
	ErrMarkdownRender      = "markdown-render"
	ErrTemplateExecution   = "template-execution"
	ErrTemplateNotFound    = "template-not-found"
	ErrTemplateNotReadable = "template-not-readable"
	ErrTemplateSyntax      = "template-syntax"
)

var list = map[string]Error{
	ErrCodeGen: {
		Code:       ErrCodeGen,
		Message:    `Code generation failed`,
		Cause:      ``,
		Categories: []string{"codegen"},
		Labels:     map[string]string{},
		Guide:      ``,
	},

	ErrFileNotFound: {
		Code:       ErrFileNotFound,
		Message:    `File is incorrect or inaccessible`,
		Cause:      ``,
		Categories: []string{"file"},
		Labels: map[string]string{
			"level": "warning",
		},
		Guide: `Ensure the given file exists and can be access by errata`,
	},

	ErrFileNotReadable: {
		Code:       ErrFileNotReadable,
		Message:    `File is unreadable`,
		Cause:      ``,
		Categories: []string{"file"},
		Labels: map[string]string{
			"level": "warning",
		},
		Guide: `Ensure the given file can be read by errata`,
	},

	ErrInvalidDefinitions: {
		Code:       ErrInvalidDefinitions,
		Message:    `One or more definitions declared in %q are invalid`,
		Cause:      ``,
		Categories: []string{"definitions", "validation"},
		Labels: map[string]string{
			"level": "error",
		},
		Guide: `Review the error(s) and try again`,
	},

	ErrInvalidSyntax: {
		Code:       ErrInvalidSyntax,
		Message:    `File is malformed`,
		Cause:      ``,
		Categories: []string{"parsing"},
		Labels:     map[string]string{},
		Guide:      `Check the YML file for syntax errors`,
	},

	ErrMarkdownRender: {
		Code:       ErrMarkdownRender,
		Message:    `Markdown rendering failed`,
		Cause:      ``,
		Categories: []string{"web-ui"},
		Labels:     map[string]string{},
		Guide:      ``,
	},

	ErrTemplateExecution: {
		Code:       ErrTemplateExecution,
		Message:    `Error in template execution`,
		Cause:      `Possible use of missing or renamed field`,
		Categories: []string{"codegen"},
		Labels:     map[string]string{},
		Guide:      ``,
	},

	ErrTemplateNotFound: {
		Code:       ErrTemplateNotFound,
		Message:    `Template path is incorrect or inaccessible`,
		Cause:      ``,
		Categories: []string{"file"},
		Labels:     map[string]string{},
		Guide:      ``,
	},

	ErrTemplateNotReadable: {
		Code:       ErrTemplateNotReadable,
		Message:    `Template path is unreadable`,
		Cause:      ``,
		Categories: []string{"file"},
		Labels:     map[string]string{},
		Guide:      ``,
	},

	ErrTemplateSyntax: {
		Code:       ErrTemplateSyntax,
		Message:    `Syntax error in template`,
		Cause:      ``,
		Categories: []string{"codegen"},
		Labels:     map[string]string{},
		Guide:      ``,
	},
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.wrapped = wrapped

	addCaller(&err)
	return err
}

func addCaller(err *Error) {
	_, file, line, ok := runtime.Caller(3)
	if ok {
		paths := strings.Split(file, string(os.PathSeparator))
		segments := 2
		if len(paths) < segments {
			segments = 1
		}
		err.file = filepath.Join(paths[len(paths)-segments:]...)
		err.line = line
	}
}

func generateReference(code string) string {
	return fmt.Sprintf("%x", sha1.Sum([]byte(code+time.Now().Format(time.RFC3339Nano))))
}

func NewCodeGenErr(wrapped error) Error {
	err := NewFromCode(ErrCodeGen, wrapped)
	err.Args = []interface{}{}
	return err
}

func NewFileNotFoundErr(wrapped error, path string) Error {
	err := NewFromCode(ErrFileNotFound, wrapped)
	err.Args = []interface{}{path}
	return err
}

func NewFileNotReadableErr(wrapped error, path string) Error {
	err := NewFromCode(ErrFileNotReadable, wrapped)
	err.Args = []interface{}{path}
	return err
}

func NewInvalidDefinitionsErr(wrapped error, path string) Error {
	err := NewFromCode(ErrInvalidDefinitions, wrapped)
	err.Args = []interface{}{path}
	return err
}

func NewInvalidSyntaxErr(wrapped error) Error {
	err := NewFromCode(ErrInvalidSyntax, wrapped)
	err.Args = []interface{}{}
	return err
}

func NewMarkdownRenderErr(wrapped error) Error {
	err := NewFromCode(ErrMarkdownRender, wrapped)
	err.Args = []interface{}{}
	return err
}

func NewTemplateExecutionErr(wrapped error) Error {
	err := NewFromCode(ErrTemplateExecution, wrapped)
	err.Args = []interface{}{}
	return err
}

func NewTemplateNotFoundErr(wrapped error) Error {
	err := NewFromCode(ErrTemplateNotFound, wrapped)
	err.Args = []interface{}{}
	return err
}

func NewTemplateNotReadableErr(wrapped error) Error {
	err := NewFromCode(ErrTemplateNotReadable, wrapped)
	err.Args = []interface{}{}
	return err
}

func NewTemplateSyntaxErr(wrapped error) Error {
	err := NewFromCode(ErrTemplateSyntax, wrapped)
	err.Args = []interface{}{}
	return err
}
