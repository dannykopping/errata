// Package errata is auto-generated by errata
// Version: 1194a7a65ec082ce53c830fc87caafa1/2022-05-29T17:01:15+02:00 (hash/date)
package errata

import (
	"fmt"

	"github.com/google/uuid"
)

func init() {
	uuid.EnableRandPool()
}

type Error struct {
	Code       string
	Message    string
	Cause      string
	Solution   string
	Categories []string
	Labels     map[string]string

	uuid         string
	translations map[string]Error
	wrapped      error
}

func (e Error) Unwrap() error {
	return e.wrapped
}

func (e Error) UUID() string {
	return e.uuid
}

func (e Error) Error() string {
	if w := e.Unwrap(); w != nil {
		return fmt.Sprintf("[code: %s] %s", e.Code, w)
	}

	return e.Code
}

func (e Error) Translate(locale string) Error {
	// if no translations are defined, return self
	if e.translations == nil {
		return e
	}

	tr, found := e.translations[locale]

	// if no translations are defined, return self
	if !found {
		return e
	}

	// add untranslated fields
	tr.Code = e.Code
	tr.Labels = e.Labels
	tr.Categories = e.Categories
	return tr
}

func (e Error) Locales() (list []string) {
	for locale := range e.translations {
		list = append(list, locale)
	}

	return
}

const (
	ErrCodeGenError        = "code_gen_error"
	ErrFileNotFound        = "file_not_found"
	ErrFileNotReadable     = "file_not_readable"
	ErrInvalidDatasource   = "invalid_datasource"
	ErrInvalidSyntax       = "invalid_syntax"
	ErrTemplateExecution   = "template_execution"
	ErrTemplateNotFound    = "template_not_found"
	ErrTemplateNotReadable = "template_not_readable"
	ErrTemplateSyntax      = "template_syntax"
)

var list = map[string]Error{
	ErrCodeGenError: {
		Code:       ErrCodeGenError,
		Message:    "Code generation failed",
		Cause:      "",
		Solution:   "",
		Categories: []string{"codegen"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},

	ErrFileNotFound: {
		Code:       ErrFileNotFound,
		Message:    "File is incorrect or inaccessible",
		Cause:      "",
		Solution:   "Ensure the given file exists and can be access by errata",
		Categories: []string{"file"},
		Labels:     map[string]string{},

		translations: map[string]Error{
			"af-za": {
				Message:  "YML-lêer is verkeerd of ontoeganklik",
				Cause:    "",
				Solution: "Maak seker die gegewe lêer bestaan en kan deur errata gelees word",
			},

			"it-it": {
				Message:  "Il file YML è errato o inaccessibile",
				Cause:    "",
				Solution: "Assicurati che il file specificato esista e possa essere letto da errata",
			},
		},
	},

	ErrFileNotReadable: {
		Code:       ErrFileNotReadable,
		Message:    "File is unreadable",
		Cause:      "",
		Solution:   "Ensure the given file can be read by errata",
		Categories: []string{"file"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},

	ErrInvalidDatasource: {
		Code:       ErrInvalidDatasource,
		Message:    "Configured datasource is invalid",
		Cause:      "",
		Solution:   "",
		Categories: []string{"init"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},

	ErrInvalidSyntax: {
		Code:       ErrInvalidSyntax,
		Message:    "File is malformed",
		Cause:      "",
		Solution:   "Check the YML file for syntax errors",
		Categories: []string{"parsing"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},

	ErrTemplateExecution: {
		Code:       ErrTemplateExecution,
		Message:    "Error in template execution",
		Cause:      "Possible use of missing or renamed field",
		Solution:   "",
		Categories: []string{"codegen"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},

	ErrTemplateNotFound: {
		Code:       ErrTemplateNotFound,
		Message:    "Template path is incorrect or inaccessible",
		Cause:      "",
		Solution:   "",
		Categories: []string{"file"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},

	ErrTemplateNotReadable: {
		Code:       ErrTemplateNotReadable,
		Message:    "Template path is unreadable",
		Cause:      "",
		Solution:   "",
		Categories: []string{"file"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},

	ErrTemplateSyntax: {
		Code:       ErrTemplateSyntax,
		Message:    "Syntax error in template",
		Cause:      "",
		Solution:   "",
		Categories: []string{"codegen"},
		Labels:     map[string]string{},

		translations: map[string]Error{},
	},
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.uuid = generateReference()
	err.wrapped = wrapped
	return err
}

func generateReference() string {
	uuidV4, err := uuid.NewRandom()
	if err != nil {
		return "-"
	}

	return uuidV4.String()
}

func NewCodeGenErrorErr(wrapped error) Error {
	return NewFromCode(ErrCodeGenError, wrapped)
}

func NewFileNotFoundErr(wrapped error) Error {
	return NewFromCode(ErrFileNotFound, wrapped)
}

func NewFileNotReadableErr(wrapped error) Error {
	return NewFromCode(ErrFileNotReadable, wrapped)
}

func NewInvalidDatasourceErr(wrapped error) Error {
	return NewFromCode(ErrInvalidDatasource, wrapped)
}

func NewInvalidSyntaxErr(wrapped error) Error {
	return NewFromCode(ErrInvalidSyntax, wrapped)
}

func NewTemplateExecutionErr(wrapped error) Error {
	return NewFromCode(ErrTemplateExecution, wrapped)
}

func NewTemplateNotFoundErr(wrapped error) Error {
	return NewFromCode(ErrTemplateNotFound, wrapped)
}

func NewTemplateNotReadableErr(wrapped error) Error {
	return NewFromCode(ErrTemplateNotReadable, wrapped)
}

func NewTemplateSyntaxErr(wrapped error) Error {
	return NewFromCode(ErrTemplateSyntax, wrapped)
}
