// Package errata is auto-generated by errata
// Version: d6e564e9fce1977c957a8e853c235f4d/2022-06-04T14:00:52+02:00 (hash/date)
package errata

import (
	"fmt"

	"github.com/google/uuid"
)

func init() {
	uuid.EnableRandPool()
}

type Error struct {
	Code       string
	Message    string
	Cause      string
	Solution   string
	Categories []string
	Labels     map[string]string

	uuid    string
	wrapped error
}

func (e Error) Unwrap() error {
	return e.wrapped
}

func (e Error) UUID() string {
	return e.uuid
}

func (e Error) Error() string {
	if w := e.Unwrap(); w != nil {
		return fmt.Sprintf("[code: %s] %s", e.Code, w)
	}

	return e.Code
}

const (
	ErrCodeGen             = "code_gen"
	ErrFileNotFound        = "file_not_found"
	ErrFileNotReadable     = "file_not_readable"
	ErrInvalidDatasource   = "invalid_datasource"
	ErrInvalidSyntax       = "invalid_syntax"
	ErrMarkdownRender      = "markdown_render"
	ErrTemplateExecution   = "template_execution"
	ErrTemplateNotFound    = "template_not_found"
	ErrTemplateNotReadable = "template_not_readable"
	ErrTemplateSyntax      = "template_syntax"
)

var list = map[string]Error{
	ErrCodeGen: {
		Code:       ErrCodeGen,
		Message:    `Code generation failed`,
		Cause:      ``,
		Solution:   ``,
		Categories: []string{"codegen"},
		Labels:     map[string]string{},
	},

	ErrFileNotFound: {
		Code:       ErrFileNotFound,
		Message:    `File is incorrect or inaccessible`,
		Cause:      ``,
		Solution:   `Ensure the given file exists and can be access by errata`,
		Categories: []string{"file"},
		Labels:     map[string]string{},
	},

	ErrFileNotReadable: {
		Code:       ErrFileNotReadable,
		Message:    `File is unreadable`,
		Cause:      ``,
		Solution:   `Ensure the given file can be read by errata`,
		Categories: []string{"file"},
		Labels:     map[string]string{},
	},

	ErrInvalidDatasource: {
		Code:       ErrInvalidDatasource,
		Message:    `Configured datasource is invalid`,
		Cause:      ``,
		Solution:   ``,
		Categories: []string{"init"},
		Labels:     map[string]string{},
	},

	ErrInvalidSyntax: {
		Code:       ErrInvalidSyntax,
		Message:    `File is malformed`,
		Cause:      ``,
		Solution:   `Check the YML file for syntax errors`,
		Categories: []string{"parsing"},
		Labels:     map[string]string{},
	},

	ErrMarkdownRender: {
		Code:       ErrMarkdownRender,
		Message:    `Markdown rendering failed`,
		Cause:      ``,
		Solution:   ``,
		Categories: []string{"web-ui"},
		Labels:     map[string]string{},
	},

	ErrTemplateExecution: {
		Code:       ErrTemplateExecution,
		Message:    `Error in template execution`,
		Cause:      `Possible use of missing or renamed field`,
		Solution:   ``,
		Categories: []string{"codegen"},
		Labels:     map[string]string{},
	},

	ErrTemplateNotFound: {
		Code:       ErrTemplateNotFound,
		Message:    `Template path is incorrect or inaccessible`,
		Cause:      ``,
		Solution:   ``,
		Categories: []string{"file"},
		Labels:     map[string]string{},
	},

	ErrTemplateNotReadable: {
		Code:       ErrTemplateNotReadable,
		Message:    `Template path is unreadable`,
		Cause:      ``,
		Solution:   ``,
		Categories: []string{"file"},
		Labels:     map[string]string{},
	},

	ErrTemplateSyntax: {
		Code:       ErrTemplateSyntax,
		Message:    `Syntax error in template`,
		Cause:      ``,
		Solution:   ``,
		Categories: []string{"codegen"},
		Labels:     map[string]string{},
	},
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.uuid = generateReference()
	err.wrapped = wrapped
	return err
}

func generateReference() string {
	uuidV4, err := uuid.NewRandom()
	if err != nil {
		return "-"
	}

	return uuidV4.String()
}

func NewCodeGenErr(wrapped error) Error {
	return NewFromCode(ErrCodeGen, wrapped)
}

func NewFileNotFoundErr(wrapped error) Error {
	return NewFromCode(ErrFileNotFound, wrapped)
}

func NewFileNotReadableErr(wrapped error) Error {
	return NewFromCode(ErrFileNotReadable, wrapped)
}

func NewInvalidDatasourceErr(wrapped error) Error {
	return NewFromCode(ErrInvalidDatasource, wrapped)
}

func NewInvalidSyntaxErr(wrapped error) Error {
	return NewFromCode(ErrInvalidSyntax, wrapped)
}

func NewMarkdownRenderErr(wrapped error) Error {
	return NewFromCode(ErrMarkdownRender, wrapped)
}

func NewTemplateExecutionErr(wrapped error) Error {
	return NewFromCode(ErrTemplateExecution, wrapped)
}

func NewTemplateNotFoundErr(wrapped error) Error {
	return NewFromCode(ErrTemplateNotFound, wrapped)
}

func NewTemplateNotReadableErr(wrapped error) Error {
	return NewFromCode(ErrTemplateNotReadable, wrapped)
}

func NewTemplateSyntaxErr(wrapped error) Error {
	return NewFromCode(ErrTemplateSyntax, wrapped)
}
