// package errata is auto-generated by errata
package errata

import "fmt"

type Error struct {
	Code       string
	Message    string
	Cause      string
	Categories []string
	Labels     map[string]string
	Interfaces interfaces

	inner error
}

type interfaces struct {
	HTTPResponseCode int
	ShellExitCode    int
}

func (e Error) Unwrap() error {
	return e.inner
}

func (e Error) Error() string {
	if w := e.Unwrap(); w != nil {
		return fmt.Sprintf("[code: %s] %s", e.Code, w)
	}

	return e.Code
}

const (
	ErrAccountBlockedAbuse = "account_blocked_abuse"
	ErrAccountBlockedSpam  = "account_blocked_spam"
	ErrIncorrectEmail      = "incorrect_email"
	ErrIncorrectPassword   = "incorrect_password"
	ErrInvalidEmail        = "invalid_email"
	ErrInvalidRequest      = "invalid_request"
	ErrMissingValues       = "missing_values"
	ErrResponseFormatting  = "response_formatting"
)

func NewAccountBlockedAbuse(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrAccountBlockedAbuse,
		Message:    "Account is blocked because of abuse",
		Cause:      "",
		Categories: []string{"login"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 403, ShellExitCode: 3},
	}
}

func NewAccountBlockedSpam(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrAccountBlockedSpam,
		Message:    "Account is blocked because of spam",
		Cause:      "",
		Categories: []string{"login"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 403, ShellExitCode: 3},
	}
}

func NewIncorrectEmail(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrIncorrectEmail,
		Message:    "Given email address is incorrect",
		Cause:      "",
		Categories: []string{"login"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 403, ShellExitCode: 2},
	}
}

func NewIncorrectPassword(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrIncorrectPassword,
		Message:    "Given password is incorrect",
		Cause:      "",
		Categories: []string{"login"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 403, ShellExitCode: 2},
	}
}

func NewInvalidEmail(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrInvalidEmail,
		Message:    "Please provide a valid email address",
		Cause:      "Given email address is invalid",
		Categories: []string{"login"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 400, ShellExitCode: 1},
	}
}

func NewInvalidRequest(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrInvalidRequest,
		Message:    "One or more values are missing",
		Cause:      "Form submission was missing required fields",
		Categories: []string{"login"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 400, ShellExitCode: 1},
	}
}

func NewMissingValues(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrMissingValues,
		Message:    "One or more values are missing",
		Cause:      "Form submission was missing required fields",
		Categories: []string{"login"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 400, ShellExitCode: 1},
	}
}

func NewResponseFormatting(inner error) Error {
	return Error{
		inner:      inner,
		Code:       ErrResponseFormatting,
		Message:    "Failed to format response body",
		Cause:      "",
		Categories: []string{"internal"},
		Labels:     map[string]string{},
		Interfaces: interfaces{HTTPResponseCode: 500},
	}
}
