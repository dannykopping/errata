// Package errata is auto-generated by errata
package errata

import "fmt"

type Error struct {
	Code       string
	Message    string
	Cause      string
	Solution   string
	Categories []string
	Labels     map[string]string

	translations map[string]Error
	wrapped      error
}

func (e Error) Unwrap() error {
	return e.wrapped
}

func (e Error) Error() string {
	if w := e.Unwrap(); w != nil {
		return fmt.Sprintf("[code: %s] %s", e.Code, w)
	}

	return e.Code
}

func (e Error) Translate(locale string) Error {
	// if no translations are defined, return self
	if e.translations == nil {
		return e
	}

	tr, found := e.translations[locale]

	// if no translations are defined, return self
	if !found {
		return e
	}

	// add untranslated fields
	tr.Code = e.Code
	tr.Labels = e.Labels
	tr.Categories = e.Categories
	return tr
}

func (e Error) Locales() (list []string) {
	for locale := range e.translations {
		list = append(list, locale)
	}

	return
}

const (
	ErrAccountBlockedAbuse = "account_blocked_abuse"
	ErrAccountBlockedSpam  = "account_blocked_spam"
	ErrIncorrectEmail      = "incorrect_email"
	ErrIncorrectPassword   = "incorrect_password"
	ErrInvalidEmail        = "invalid_email"
	ErrInvalidRequest      = "invalid_request"
	ErrMissingValues       = "missing_values"
	ErrResponseFormatting  = "response_formatting"
)

var list = map[string]Error{
	ErrAccountBlockedAbuse: {
		Code:       ErrAccountBlockedAbuse,
		Message:    "Account is blocked because of abuse",
		Cause:      "",
		Solution:   "",
		Categories: []string{"login"},
		Labels: map[string]string{
			"http_response_code": "403",
			"shell_exit_code":    "3",
		},

		translations: map[string]Error{},
	},

	ErrAccountBlockedSpam: {
		Code:       ErrAccountBlockedSpam,
		Message:    "Account is blocked because of spam",
		Cause:      "",
		Solution:   "",
		Categories: []string{"login"},
		Labels: map[string]string{
			"http_response_code": "403",
			"shell_exit_code":    "3",
		},

		translations: map[string]Error{},
	},

	ErrIncorrectEmail: {
		Code:       ErrIncorrectEmail,
		Message:    "Given email address is incorrect",
		Cause:      "",
		Solution:   "",
		Categories: []string{"login"},
		Labels: map[string]string{
			"http_response_code": "403",
			"shell_exit_code":    "2",
		},

		translations: map[string]Error{},
	},

	ErrIncorrectPassword: {
		Code:       ErrIncorrectPassword,
		Message:    "Given password is incorrect",
		Cause:      "",
		Solution:   "",
		Categories: []string{"login"},
		Labels: map[string]string{
			"http_response_code": "403",
			"shell_exit_code":    "2",
		},

		translations: map[string]Error{},
	},

	ErrInvalidEmail: {
		Code:       ErrInvalidEmail,
		Message:    "Please provide a valid email address",
		Cause:      "Given email address is invalid",
		Solution:   "",
		Categories: []string{"login"},
		Labels: map[string]string{
			"shell_exit_code":    "1",
			"http_response_code": "400",
		},

		translations: map[string]Error{},
	},

	ErrInvalidRequest: {
		Code:       ErrInvalidRequest,
		Message:    "One or more values are missing",
		Cause:      "Form submission was missing required fields",
		Solution:   "",
		Categories: []string{"login"},
		Labels: map[string]string{
			"http_response_code": "400",
			"shell_exit_code":    "1",
		},

		translations: map[string]Error{},
	},

	ErrMissingValues: {
		Code:       ErrMissingValues,
		Message:    "One or more values are missing",
		Cause:      "Form submission was missing required fields",
		Solution:   "",
		Categories: []string{"login"},
		Labels: map[string]string{
			"http_response_code": "400",
			"shell_exit_code":    "1",
		},

		translations: map[string]Error{},
	},

	ErrResponseFormatting: {
		Code:       ErrResponseFormatting,
		Message:    "Failed to format response body",
		Cause:      "",
		Solution:   "",
		Categories: []string{"internal"},
		Labels: map[string]string{
			"http_response_code": "500",
		},

		translations: map[string]Error{},
	},
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.wrapped = wrapped
	return err
}

func NewAccountBlockedAbuseErr(wrapped error) Error {
	return NewFromCode(ErrAccountBlockedAbuse, wrapped)
}

func NewAccountBlockedSpamErr(wrapped error) Error {
	return NewFromCode(ErrAccountBlockedSpam, wrapped)
}

func NewIncorrectEmailErr(wrapped error) Error {
	return NewFromCode(ErrIncorrectEmail, wrapped)
}

func NewIncorrectPasswordErr(wrapped error) Error {
	return NewFromCode(ErrIncorrectPassword, wrapped)
}

func NewInvalidEmailErr(wrapped error) Error {
	return NewFromCode(ErrInvalidEmail, wrapped)
}

func NewInvalidRequestErr(wrapped error) Error {
	return NewFromCode(ErrInvalidRequest, wrapped)
}

func NewMissingValuesErr(wrapped error) Error {
	return NewFromCode(ErrMissingValues, wrapped)
}

func NewResponseFormattingErr(wrapped error) Error {
	return NewFromCode(ErrResponseFormatting, wrapped)
}
