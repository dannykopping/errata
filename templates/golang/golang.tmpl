// Package {{ Package }} is auto-generated by errata
package {{ Package }}

import "fmt"

type Error struct {
  Code       string
  Message    string
  Cause      string
  Solution   string
  Categories []string
  Labels     map[string]string

	translations map[string]Error
  wrapped error
}

func (e Error) Unwrap() error {
  return e.wrapped
}

func (e Error) Error() string {
  if w := e.Unwrap(); w != nil {
    return fmt.Sprintf("[code: %s] %s", e.Code, w)
  }

  return e.Code
}

func (e Error) Translate(locale string) Error {
  // if no translations are defined, return self
  if e.translations == nil {
    return e
  }

  tr, found := e.translations[locale]

  // if no translations are defined, return self
  if !found {
    return e
  }

  // add untranslated fields
  tr.Code = e.Code
  tr.Labels = e.Labels
  tr.Categories = e.Categories
  return tr
}

func (e Error) Locales() (list []string) {
  for locale := range e.translations {
    list = append(list, locale)
  }

  return
}

const (
{%- for code, error in Errors sorted %}
  Err{{ code | constantize }} = "{{ code }}"
{%- endfor %}
)

{% macro quote_list(items) %}
  {%- for item in items %}
    {{- item | stringformat:"%q" -}}
    {%- if not forloop.Last %}, {% endif -%}
  {% endfor -%}
{% endmacro %}

{% macro quote_map(items) %}
  {%- for key, item in items %}
    {{ key | stringformat:"%q" -}}: "{{- item | stringformat:"%v" -}}",
  {%- endfor %}
{% endmacro %}

var list = map[string]Error{
  {%- for code, error in Errors sorted %}
  Err{{ code | constantize }}: {
      Code: Err{{ code | constantize }},
      Message: "{{ error.Definition.message -}}",
      Cause: "{{ error.Definition.cause }}",
      Solution: "{{ error.Definition.solution }}",
      Categories: []string{ {{- quote_list(error.Definition.categories) -}} },
      Labels: map[string]string{ {{ quote_map(error.Definition.labels) }} },

      translations: map[string]Error{
        {%- for locale, x in I18n sorted %}
        {%- for i18n_code, err in x sorted %}
        {%- if i18n_code == code %}
        "{{ locale }}": {
          Message: "{{ err.Definition.message -}}",
          Cause: "{{ err.Definition.cause }}",
          Solution: "{{ err.Definition.solution }}",
        },
        {% endif %}
        {% endfor %}
        {% endfor %}
      },
  },
  {% endfor %}
}

func NewFromCode(code string, wrapped error) Error {
  err := list[code]
  err.wrapped = wrapped
  return err
}

{% for code, error in Errors sorted %}
func New{{ code | constantize }}(wrapped error) Error {
  return NewFromCode(Err{{ code | constantize }}, wrapped)
}
{% endfor -%}