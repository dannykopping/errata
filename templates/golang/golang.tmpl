// Package {{ .Package }} is auto-generated by errata
package {{ .Package }}

import "fmt"

type Error struct {
    Code       string
    Message    string
    Cause      string
    Categories []string
    Labels     map[string]string
    Interfaces interfaces

    inner error
}

type interfaces struct {
    HTTPResponseCode int
    ShellExitCode int
}

func (e Error) Unwrap() error {
    return e.inner
}

func (e Error) Error() string {
    if w := e.Unwrap(); w != nil {
        return fmt.Sprintf("[code: %s] %s", e.Code, w)
    }

    return e.Code
}

const (
{{ range $code, $error := .Errors -}}
    Err{{ $code | constantize }} = "{{ $code }}"
{{ end }}
)

{{ range $code, $error := .Errors -}}
func New{{ $code | constantize }}(inner error, {{- template "params" $error.Definition -}}) Error {
    return Error{
        inner: inner,
        Code: Err{{ $code | constantize }},
        Message: {{ template "msg" $error.Definition -}},
        Cause: "{{ or $error.Definition.cause "" }}",
        Categories: []string{ {{- template "args" input "values" $error.Definition.categories "quoted" true -}} },
        Labels: map[string]string{
            {{- template "map" input "values" $error.Definition.labels "quoted" true }}
        },
        Interfaces: interfaces{
            {{- if $error.Definition.interfaces.http_response_code -}}
            HTTPResponseCode: {{ $error.Definition.interfaces.http_response_code }},
            {{- end -}}

            {{- if $error.Definition.interfaces.shell_exit_code -}}
            ShellExitCode: {{ $error.Definition.interfaces.shell_exit_code -}},
            {{- end -}}
        },
    }
}

{{ end -}}