// Package {{ Package }} is auto-generated by errata
package {{ Package }}

import "fmt"

type Error struct {
  Code       string
  Message    string
  Cause      string
  Categories []string
  Labels     map[string]string
  Interfaces interfaces

  inner error
}

type interfaces struct {
  HTTPResponseCode int
  ShellExitCode int
}

func (e Error) Unwrap() error {
  return e.inner
}

func (e Error) Error() string {
  if w := e.Unwrap(); w != nil {
    return fmt.Sprintf("[code: %s] %s", e.Code, w)
  }

  return e.Code
}

{% macro quote_list(items) %}
  {%- for item in items %}
    {{- item | stringformat:"%q" -}}
    {%- if not forloop.Last %}, {% endif -%}
  {% endfor -%}
{% endmacro %}

{% macro quote_map(items) %}
  {%- for key, item in items %}
    {{ key | stringformat:"%q" -}}: "{{- item | stringformat:"%v" -}}",
  {%- endfor %}
{% endmacro %}

const (
{%- for code, error in Errors sorted %}
  Err{{ code | constantize }} = "{{ code }}"
{%- endfor %}
)

{% for code, error in Errors sorted %}
func New{{ code | constantize }}(inner error) Error {
  return Error{
        inner: inner,
        Code: Err{{ code | constantize }},
        Message: "{{ error.Definition.message -}}",
        Cause: "{{ error.Definition.cause }}",
        Categories: []string{ {{- quote_list(error.Definition.categories) -}} },
        Labels: map[string]string{ {{ quote_map(error.Definition.labels) }} },
    }
}
{% endfor -%}
