// Package {{ Package }} is auto-generated by errata
// Version: {{ Version }} (hash/date)
package {{ Package }}

import (
	"fmt"

	"github.com/google/uuid"
)

func init() {
  uuid.EnableRandPool()
}

type Error struct {
  Code       string
  Message    string
  Cause      string
  Solution   string
  Categories []string
  Labels     map[string]string

  uuid         string
  wrapped      error
}

func (e Error) Unwrap() error {
  return e.wrapped
}

func (e Error) UUID() string {
  return e.uuid
}

func (e Error) Error() string {
  if w := e.Unwrap(); w != nil {
    return fmt.Sprintf("[code: %s] %s", e.Code, w)
  }

  return e.Code
}

const (
{%- for code, error in Errors sorted %}
  Err{{ code | constantize }} = "{{ code }}"
{%- endfor %}
)

{% macro quote_list(items) %}
  {%- for item in items %}
    {{- item | stringformat:"%q" -}}
    {%- if not forloop.Last %}, {% endif -%}
  {% endfor -%}
{% endmacro %}

{% macro quote_map(items) %}
  {%- for key, item in items sorted %}
    {{ key | stringformat:"%q" -}}: "{{- item | stringformat:"%v" -}}",
  {%- endfor %}
{% endmacro %}

var list = map[string]Error{
  {%- for code, error in Errors sorted %}
  Err{{ code | constantize }}: {
      Code: Err{{ code | constantize }},
      Message: `{{ error.Definition.message -}}`,
      Cause: `{{ error.Definition.cause }}`,
      Solution: `{{ error.Definition.solution }}`,
      Categories: []string{ {{- quote_list(error.Definition.categories) -}} },
      Labels: map[string]string{ {{ quote_map(error.Definition.labels) }} },
  },
  {% endfor %}
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.uuid = generateReference()
	err.wrapped = wrapped
	return err
}

func generateReference() string {
	uuidV4, err := uuid.NewRandom()
	if err != nil {
		return "-"
	}

	return uuidV4.String()
}

{% for code, error in Errors sorted %}
func New{{ code | constantize }}Err(wrapped error) Error {
  return NewFromCode(Err{{ code | constantize }}, wrapped)
}
{% endfor -%}