// Package {{ Package }} is auto-generated by errata
// Version: {{ Version }} (hash/date)
package {{ Package }}

import (
	"crypto/sha1"
	"fmt"
	"time"

	{% for i in Options.Imports sorted %} {{- i | stringformat:"%q" }} {% endfor %}
)

type Error struct {
  Code       string
  Message    string
  Cause      string
  Categories []string
  Args       []interface{}
  Labels     map[string]string

  uuid         string
  wrapped      error
}

func (e Error) Unwrap() error {
  return e.wrapped
}

func (e Error) UUID() string {
  return e.uuid
}

func (e Error) Error() string {
  return fmt.Sprintf(e.Message, e.Args...)
}

const (
{%- for code, error in Errors sorted %}
  Err{{ code | constantize }} = "{{ code }}"
{%- endfor %}
)

{% macro quote_list(items) %}
  {%- for item in items %}
    {{- item | stringformat:"%q" -}}
    {%- if not forloop.Last %}, {% endif -%}
  {% endfor -%}
{% endmacro %}

{% macro quote_map(items) %}
  {%- for key, item in items sorted %}
    {{ key | stringformat:"%q" -}}: "{{- item | stringformat:"%v" -}}",
  {%- endfor %}
{% endmacro %}

{% macro args(items) %}
  {%- for item in items sorted %}
    {{- item.Name }} {{ item.Type }}
    {%- if not forloop.Last %}, {% endif -%}
  {% endfor -%}
{% endmacro %}

{% macro contexts(items) %}
  {%- for context in items %}
    {{- context }} interface{}
    {%- if not forloop.Last %}, {% endif -%}
  {% endfor -%}
{% endmacro %}

{% macro args_list(items) -%}
  {%- for item in items sorted %}
    {{- item.Name }}
    {%- if not forloop.Last %}, {% endif -%}
  {% endfor -%}
{% endmacro %}

var list = map[string]Error{
  {%- for code, error in Errors sorted %}
  Err{{ code | constantize }}: {
      Code: Err{{ code | constantize }},
      Message: `{{ error.Message -}}`,
      Cause: `{{ error.Cause }}`,
      Categories: []string{ {{- quote_list(error.Categories) -}} },
      Labels: map[string]string{ {{ quote_map(error.Labels) }} },
  },
  {% endfor %}
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.uuid = generateReference()
	err.wrapped = wrapped
	return err
}

func generateReference() string {
	return fmt.Sprintf("%x", sha1.Sum([]byte(time.Now().Format(time.RFC3339Nano))))
}

{% for code, error in Errors sorted %}
func New{{ code | constantize }}Err(wrapped error, {{ args(error.Args) }}, {{ contexts(error.Definition.context) }}) Error {
  err := NewFromCode(Err{{ code | constantize }}, wrapped)
  err.Args = []interface{}{ {{ args_list(error.Args) }} }
  return err
}
{% endfor -%}