// Package {{ Package }} is auto-generated by errata
// Errata Schema Version: {{ SchemaVersion }}
// Hash: {{ Hash }}
{% import "templates/golang-macros.tmpl" quote_list, quote_map, args, args_list, contexts -%}
package {{ Package }}

import (
	"crypto/sha1"
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	{% for i in Options.Imports sorted -%}
	  {{- i | stringformat:"%q" }}
	{%- endfor %}
)

type erratum struct {
	code       string
	message    string
	categories []string
	args       map[string]interface{}
	labels     map[string]string
	guide      string

	file string
	line int

	uuid    string
	wrapped error
}

// TODO: add documentation to all public methods

// Erratum is the public interface which indicates that a given error is an Erratum.
type Erratum interface {
  // behave like a regular error
	error
	Unwrap() error

	Code() string
	Message() string
	Categories() []string
	Args() map[string]interface{}
	Guide() string
	Labels() map[string]string

	UUID() string
	HelpURL() string
}

func (e *erratum) Unwrap() error {
	return e.wrapped
}

func (e *erratum) UUID() string {
	if e.uuid == "" {
		e.uuid = generateReference(e.code)
	}
	return e.uuid
}

// Format controls the verbosity of the printed error.
func (e *erratum) Format(f fmt.State, verb rune) {
	if verb == 'v' && f.Flag('+') {
		args := func() string {
			if len(e.Args()) <= 0 {
				return ""
			}

			var args []string
			for k, v := range e.Args() {
				args = append(args, fmt.Sprintf(`%s="%+v"`, k, v))
			}
			return fmt.Sprintf(` (%s)`, strings.Join(args, ", "))
		}()

		f.Write([]byte(fmt.Sprintf("%s%s. For more details, see %s", e.Error(), args, e.HelpURL())))
		if unwrapped := e.Unwrap(); unwrapped != nil {
			f.Write([]byte("\nâ†³ "))
			if e, ok := unwrapped.(fmt.Formatter); ok {
				e.Format(f, verb)
			} else if e, ok := unwrapped.(error); ok {
				f.Write([]byte(e.Error()))
			}
		}
	} else {
		f.Write([]byte(e.Error()))
	}
}

func (e *erratum) Error() string {
  return fmt.Sprintf("[%s] <%s:%v> %s", e.code, e.file, e.line, e.message)
}

func (e *erratum) HelpURL() string {
  return fmt.Sprintf("{{ Options.BaseURL }}%s", e.code)
}

func (e *erratum) Code() string {
	return e.code
}

func (e *erratum) Message() string {
	return e.message
}

func (e *erratum) Categories() []string {
	return e.categories
}

func (e *erratum) Args() map[string]interface{} {
	return e.args
}

func (e *erratum) Labels() map[string]string {
	return e.labels
}

func (e *erratum) Guide() string {
	return e.guide
}

func (e *erratum) File() string {
	return e.file
}

func (e *erratum) Line() int {
	return e.line
}

const (
{%- for code, error in Errors sorted %}
  {{ code | constantize }}ErrCode string = "{{ Options.Prefix }}{{ code | fnv32a }}"
{%- endfor %}
)

{%- for code, error in Errors sorted %}
type {{ code | constantize }}Err struct {
  erratum
}
{%- endfor %}

{% for code, error in Errors sorted %}
func New{{ code | constantize }}Err(wrapped error, {{ args(error.Args) }} {{ contexts(error.Definition.context) }}) *{{ code | constantize }}Err {
  err := erratum{
    code: {{ code | constantize }}ErrCode,
    message: fmt.Sprintf({{ error.Message | macro_expand:"%v" -}}),
    categories: []string{ {{- quote_list(error.Categories) -}} },
    labels: map[string]string{ {{ quote_map(error.Labels) }} },
    guide: `{{ error.Guide | escape_backtick -}}`,

    args: map[string]interface{}{
      {%- for arg in error.Args sorted %}
        "{{ arg.Name }}": {{ arg.Name }},
      {%- endfor %}
    },
    wrapped: wrapped,
  }

  addCaller(&err)
  return &{{ code | constantize }}Err{err}
}

{% for arg in error.Args sorted %}
// Get{{ arg.Name | constantize }} returns the {{ arg.Name | stringformat:"%q" }} argument for a {{ code | constantize }}Err instance.
func (e *{{ code | constantize }}Err) Get{{ arg.Name | constantize }}() interface{} {
  return e.args["{{ arg.Name }}"]
}
{% endfor -%}

{% for label, value in error.Labels sorted %}
// Get{{ label | constantize }} returns the {{ label|stringformat:"%q" }} label for a {{ code | constantize }}Err instance.
func (e *{{ code | constantize }}Err) Get{{ label | constantize }}() string {
  return {{ value | stringformat:"%q" }}
}
{% endfor -%}

{% endfor -%}

func addCaller(err *erratum) {
	_, file, line, ok := runtime.Caller(3)
	if ok {
		paths := strings.Split(file, string(os.PathSeparator))
		segments := 2
		if len(paths) < segments {
			segments = 1
		}
		err.file = filepath.Join(paths[len(paths)-segments:]...)
		err.line = line
	}
}

func generateReference(code string) string {
	return fmt.Sprintf("%x", sha1.Sum([]byte(code + time.Now().Format(time.RFC3339Nano))))
}