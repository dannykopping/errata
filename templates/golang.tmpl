// Package {{ Package }} is auto-generated by errata
// Version: {{ Version }}
{% import "templates/golang-macros.tmpl" quote_list, quote_map, args, args_list, contexts -%}
package {{ Package }}

import (
	"crypto/sha1"
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	{% for i in Options.Imports sorted -%}
	  {{- i | stringformat:"%q" }}
	{%- endfor %}
)

type Error struct {
	Code       string
	Message    string
	Cause      string
	Categories []string
	Args       []interface{}
	Labels     map[string]string
	Guide      string

	file string
	line int

	uuid    string
	wrapped error
}

func (e Error) Unwrap() error {
  return e.wrapped
}

func (e Error) UUID() string {
	if e.uuid == "" {
		e.uuid = generateReference(e.Code)
	}
	return e.uuid
}

func (e Error) Error() string {
  message := fmt.Sprintf("[{{ Options.Prefix -}}%s] [%s:%v] %s. For more details, see %s.\nâ†³ %s", e.Code, e.file, e.line, e.Message, e.HelpURL(), e.Unwrap())
  return fmt.Sprintf(message, e.Args...)
}

func (e Error) HelpURL() string {
  return fmt.Sprintf("{{ Options.BaseURL }}%s", e.Code)
}

const (
{%- for code, error in Errors sorted %}
  Err{{ code | constantize }} = "{{ code }}"
{%- endfor %}
)

var list = map[string]Error{
  {%- for code, error in Errors sorted %}
  Err{{ code | constantize }}: {
      Code: Err{{ code | constantize }},
      Message: `{{ error.Message -}}`,
      Cause: `{{ error.Cause }}`,
      Categories: []string{ {{- quote_list(error.Categories) -}} },
      Labels: map[string]string{ {{ quote_map(error.Labels) }} },
      Guide: `{{ error.Guide -}}`,
  },
  {% endfor %}
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.wrapped = wrapped

	addCaller(&err)
	return err
}

func addCaller(err *Error) {
	_, file, line, ok := runtime.Caller(3)
	if ok {
		paths := strings.Split(file, string(os.PathSeparator))
		segments := 2
		if len(paths) < segments {
			segments = 1
		}
		err.file = filepath.Join(paths[len(paths)-segments:]...)
		err.line = line
	}
}

func generateReference(code string) string {
	return fmt.Sprintf("%x", sha1.Sum([]byte(code + time.Now().Format(time.RFC3339Nano))))
}

{% for code, error in Errors sorted %}
func New{{ code | constantize }}Err(wrapped error, {{ args(error.Args) }} {{ contexts(error.Definition.context) }}) Error {
  err := NewFromCode(Err{{ code | constantize }}, wrapped)
  err.Args = []interface{}{ {{ args_list(error.Args) }} }
  return err
}
{% endfor -%}