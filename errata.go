// Package errata is auto-generated by errata
// Version: 36cb2dfc97df816815336d9ef15c00f1
package errata

import (
	"crypto/sha1"
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

type erratum struct {
	code       string
	message    string
	cause      string
	categories []string
	args       []interface{}
	labels     map[string]string
	guide      string

	file string
	line int

	uuid    string
	wrapped error
}

// TODO: add documentation to all public methods

// Erratum is the public interface which indicates that a given error is an Erratum.
type Erratum interface {
	// behave like a regular error
	error
	Unwrap() error

	Code() string
	Message() string
	Cause() string
	Categories() []string
	Args() []interface{}
	Guide() string
	Labels() map[string]string

	UUID() string
	HelpURL() string
}

func (e erratum) Unwrap() error {
	return e.wrapped
}

func (e erratum) UUID() string {
	if e.uuid == "" {
		e.uuid = generateReference(e.code)
	}
	return e.uuid
}

func (e erratum) Error() string {
	message := fmt.Sprintf("[errata-%s] [%s:%v] %s. For more details, see %s", e.code, e.file, e.line, e.message, e.HelpURL())
	if unwrapped := e.Unwrap(); unwrapped != nil {
		message = fmt.Sprintf("%s\nâ†³ %s", message, unwrapped.Error())
	}
	return fmt.Sprintf(message, e.Args()...)
}

func (e erratum) HelpURL() string {
	return fmt.Sprintf("https://dannykopping.github.io/errata/errata/%s", e.code)
}

func (e erratum) Code() string {
	return e.code
}

func (e erratum) Message() string {
	return e.message
}

func (e erratum) Cause() string {
	return e.cause
}

func (e erratum) Categories() []string {
	return e.categories
}

func (e erratum) Args() []interface{} {
	return e.args
}

func (e erratum) Labels() map[string]string {
	return e.labels
}

func (e erratum) Guide() string {
	return e.guide
}

func (e erratum) File() string {
	return e.file
}

func (e erratum) Line() int {
	return e.line
}

const (
	CodeGenErrCode                string = "code-gen"
	FileNotFoundErrCode           string = "file-not-found"
	FileNotReadableErrCode        string = "file-not-readable"
	InvalidDatasourceErrCode      string = "invalid-datasource"
	InvalidDefinitionsErrCode     string = "invalid-definitions"
	InvalidSyntaxErrCode          string = "invalid-syntax"
	MarkdownRenderErrCode         string = "markdown-render"
	ServeSearchIndexErrCode       string = "serve-search-index"
	ServeSearchMissingTermErrCode string = "serve-search-missing-term"
	ServeUnknownCodeErrCode       string = "serve-unknown-code"
	ServeWebUiErrCode             string = "serve-web-ui"
	TemplateExecutionErrCode      string = "template-execution"
	TemplateNotFoundErrCode       string = "template-not-found"
	TemplateNotReadableErrCode    string = "template-not-readable"
	TemplateSyntaxErrCode         string = "template-syntax"
)

type CodeGenErr struct {
	erratum
}
type FileNotFoundErr struct {
	erratum
}
type FileNotReadableErr struct {
	erratum
}
type InvalidDatasourceErr struct {
	erratum
}
type InvalidDefinitionsErr struct {
	erratum
}
type InvalidSyntaxErr struct {
	erratum
}
type MarkdownRenderErr struct {
	erratum
}
type ServeSearchIndexErr struct {
	erratum
}
type ServeSearchMissingTermErr struct {
	erratum
}
type ServeUnknownCodeErr struct {
	erratum
}
type ServeWebUiErr struct {
	erratum
}
type TemplateExecutionErr struct {
	erratum
}
type TemplateNotFoundErr struct {
	erratum
}
type TemplateNotReadableErr struct {
	erratum
}
type TemplateSyntaxErr struct {
	erratum
}

func NewCodeGenErr(wrapped error) CodeGenErr {
	err := erratum{
		code:       CodeGenErrCode,
		message:    `Code generation failed`,
		cause:      ``,
		categories: []string{"codegen"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return CodeGenErr{err}
}

func NewFileNotFoundErr(wrapped error, path string) FileNotFoundErr {
	err := erratum{
		code:       FileNotFoundErrCode,
		message:    `File path %q is incorrect or inaccessible`,
		cause:      ``,
		categories: []string{"file"},
		labels: map[string]string{
			"log_level": "warning",
		},
		guide: `Ensure the given file exists and can be accessed by errata`,

		args:    []interface{}{path},
		wrapped: wrapped,
	}

	addCaller(&err)
	return FileNotFoundErr{err}
}

// GetLogLevel returns the "log_level" label for a FileNotFoundErr instance.
func (e FileNotFoundErr) GetLogLevel() string {
	return "warning"
}

func NewFileNotReadableErr(wrapped error, path string) FileNotReadableErr {
	err := erratum{
		code:       FileNotReadableErrCode,
		message:    `File %q is unreadable`,
		cause:      ``,
		categories: []string{"file"},
		labels: map[string]string{
			"log_level": "warning",
		},
		guide: `Ensure the given file can be read by errata`,

		args:    []interface{}{path},
		wrapped: wrapped,
	}

	addCaller(&err)
	return FileNotReadableErr{err}
}

// GetLogLevel returns the "log_level" label for a FileNotReadableErr instance.
func (e FileNotReadableErr) GetLogLevel() string {
	return "warning"
}

func NewInvalidDatasourceErr(wrapped error) InvalidDatasourceErr {
	err := erratum{
		code:       InvalidDatasourceErrCode,
		message:    `Datasource is invalid`,
		cause:      ``,
		categories: []string{"datasource"},
		labels:     map[string]string{},
		guide:      `Check the given datasource file for errors`,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return InvalidDatasourceErr{err}
}

func NewInvalidDefinitionsErr(wrapped error, path string) InvalidDefinitionsErr {
	err := erratum{
		code:       InvalidDefinitionsErrCode,
		message:    `One or more definitions declared in %q are invalid`,
		cause:      ``,
		categories: []string{"definitions", "validation"},
		labels: map[string]string{
			"log_level": "error",
		},
		guide: `Review the error(s) and try again`,

		args:    []interface{}{path},
		wrapped: wrapped,
	}

	addCaller(&err)
	return InvalidDefinitionsErr{err}
}

// GetLogLevel returns the "log_level" label for a InvalidDefinitionsErr instance.
func (e InvalidDefinitionsErr) GetLogLevel() string {
	return "error"
}

func NewInvalidSyntaxErr(wrapped error) InvalidSyntaxErr {
	err := erratum{
		code:       InvalidSyntaxErrCode,
		message:    `File is malformed`,
		cause:      ``,
		categories: []string{"parsing"},
		labels:     map[string]string{},
		guide:      `Check the given datasource file for syntax errors`,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return InvalidSyntaxErr{err}
}

func NewMarkdownRenderErr(wrapped error) MarkdownRenderErr {
	err := erratum{
		code:       MarkdownRenderErrCode,
		message:    `Markdown rendering failed`,
		cause:      ``,
		categories: []string{"web-ui"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return MarkdownRenderErr{err}
}

func NewServeSearchIndexErr(wrapped error) ServeSearchIndexErr {
	err := erratum{
		code:       ServeSearchIndexErrCode,
		message:    `Failed to build search index`,
		cause:      ``,
		categories: []string{"serve", "web-ui", "search"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return ServeSearchIndexErr{err}
}

func NewServeSearchMissingTermErr(wrapped error) ServeSearchMissingTermErr {
	err := erratum{
		code:       ServeSearchMissingTermErrCode,
		message:    `Search request is missing a "term" query string parameter`,
		cause:      ``,
		categories: []string{"serve", "web-ui", "search"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return ServeSearchMissingTermErr{err}
}

func NewServeUnknownCodeErr(wrapped error, code string) ServeUnknownCodeErr {
	err := erratum{
		code:       ServeUnknownCodeErrCode,
		message:    `Cannot find error definition for given code %q`,
		cause:      ``,
		categories: []string{"serve", "web-ui"},
		labels: map[string]string{
			"log_level": "warning",
		},
		guide: ``,

		args:    []interface{}{code},
		wrapped: wrapped,
	}

	addCaller(&err)
	return ServeUnknownCodeErr{err}
}

// GetLogLevel returns the "log_level" label for a ServeUnknownCodeErr instance.
func (e ServeUnknownCodeErr) GetLogLevel() string {
	return "warning"
}

func NewServeWebUiErr(wrapped error, path string) ServeWebUiErr {
	err := erratum{
		code:       ServeWebUiErrCode,
		message:    `Cannot serve web UI for datasource %q`,
		cause:      ``,
		categories: []string{"serve", "web-ui"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{path},
		wrapped: wrapped,
	}

	addCaller(&err)
	return ServeWebUiErr{err}
}

func NewTemplateExecutionErr(wrapped error) TemplateExecutionErr {
	err := erratum{
		code:       TemplateExecutionErrCode,
		message:    `Error in template execution`,
		cause:      `Possible use of missing or renamed field`,
		categories: []string{"codegen"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return TemplateExecutionErr{err}
}

func NewTemplateNotFoundErr(wrapped error) TemplateNotFoundErr {
	err := erratum{
		code:       TemplateNotFoundErrCode,
		message:    `Template path is incorrect or inaccessible`,
		cause:      ``,
		categories: []string{"file"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return TemplateNotFoundErr{err}
}

func NewTemplateNotReadableErr(wrapped error) TemplateNotReadableErr {
	err := erratum{
		code:       TemplateNotReadableErrCode,
		message:    `Template path is unreadable`,
		cause:      ``,
		categories: []string{"file"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return TemplateNotReadableErr{err}
}

func NewTemplateSyntaxErr(wrapped error) TemplateSyntaxErr {
	err := erratum{
		code:       TemplateSyntaxErrCode,
		message:    `Syntax error in template`,
		cause:      ``,
		categories: []string{"codegen"},
		labels:     map[string]string{},
		guide:      ``,

		args:    []interface{}{},
		wrapped: wrapped,
	}

	addCaller(&err)
	return TemplateSyntaxErr{err}
}

func addCaller(err *erratum) {
	_, file, line, ok := runtime.Caller(3)
	if ok {
		paths := strings.Split(file, string(os.PathSeparator))
		segments := 2
		if len(paths) < segments {
			segments = 1
		}
		err.file = filepath.Join(paths[len(paths)-segments:]...)
		err.line = line
	}
}

func generateReference(code string) string {
	return fmt.Sprintf("%x", sha1.Sum([]byte(code+time.Now().Format(time.RFC3339Nano))))
}
